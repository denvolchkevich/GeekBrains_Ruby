# Second lesson homework


# Для класса Fixnum:
  # Метод, возвращающий вещественный результат от деления

    111.fdiv 12.3 # => 9.024390243902438

  # Метод проверяющий, является ли число нечётным

    10.odd? # => false



# Для класса Integer:
  # Метод, возвращающий Наибольший Общий Делитель 2-х чисел

    8.gcd(4) # => 4

  # Метод, позволяющий итерировать от одного числа до другого

    5.upto(10) {|i| print i, ' '} # => 5 6 7 8 9 10

  # Метод приведения целого числа к рациональному

    100.to_r # => (100/1)



# Для класса Numeric:
  # Метод, позволяющий итерировать от данного целого числа с указанием шага итерации и числа верхнего предела итерации

    1.step(to: 10, by: 2) {|i| print i, ' '} # => 1 3 5 7 9

  # Метод, приводящий данное число к комплексному (мнимому)

    10.to_c # => (10+0i)



# Для класса Float:
  # Метод, приводящий вещественное число к строке

    1.978.to_s # => "1.978"


# Для класса Array:
  # Метод, возвращающий последний элемент из массива (с его извлечением из массива)

    array_1 = [1, 2, 3, 4, 5, 6]
    array_1.pop # => [1, 2, 3, 4, 5]

  # Метод, добавляющий элемент в конец массива

    array_1.push(6) # => [1, 2, 3, 4, 5, 6]


# Для класса Hash:
  # Метод, возвращающий массив ключей хэша

    hash_1 = {:zero => 0, :one => 1, :two => 2}
    hash_1.keys # => [:zero, :one, :two]

  # Метод, возвращающий массив значений хэша

    hash_1.values # => 0, 1, 2]


# Для класса Range:
  # Метод, проверяющий, включено ли последнее значение в диапазон

    range_1 = (1..10)
    range_1.include?(10) # => true


# Условное выражение if-else-end
  # Напишите код, который будет выбирать случайный цвет из массива colors и сравнивать его с цветом в хэше player.
  # Если цвета совпадают — выводите сообщение «Джонни, ты прав!». Если цвета не совпадают, но количество символов из
  # которых они состоят одинаково — выводите: «Джонни, букв столько же, но значение иное!». В остальных случаях —
  # выводите любое другое сообщение.

    player = { name: 'johnny', color: :red }
    colors = [:blue, :white, :green, :red, :orange, :tan]

    colors.shuffle.each do |color_name|
      result = if color_name == (player[:color])
                 'Джонни, ты прав!'
               elsif color_name.length == (player[:color].length)
                 'Джонни, букв столько же, но значение иное!'
               else
                 'Джонни, ты не прав!'
               end
      puts result
    end



# Итерация с условиями
  # Пробегитесь по именам и выведите только те, длина которых меньше 10 символов и первая буква заглавная. При
  # реализации условий постарайтесь каждое из них обернуть в отдельный метод.

    names = %w[ambientsketchbook Erik\ Wollo Brian\ Eno Evangelos\ Papathanassiou Shulman]

    names.each {|name| puts name if name.length < 10 && name[0] == name[0].capitalize}



# Количество символов в элементе массива
  # Посчитайте количество символов в каждом элементе массива

    stack = %w[Ruby Python JavaScript Java .NET HTML Clojure]

    stack_hash = stack.inject({}) do |memo, lang|
      memo.merge(lang => lang.length)
    end

    puts stack_hash



# Последовательности Фибоначчи
  # Напишите метод вычисления последовательности Фибоначчи. Попробуйте реализовать алгоритм с помощью цикла и с помощью рекурсии.



    (0..10).each do |fibonacci|
      if fibonacci < 3
        puts fibonacci
      else
        puts (fibonacci - 1) + (fibonacci - 2)
      end
    end



# Продвинутый шифр Цезаря
  # Напишите алгоритм rot13, позволяющий кодировать и декодировать текст на английском языке.

    class String

      def rot13
        p self.tr("A-Ma-mN-Zn-z", "N-Zn-zA-Ma-m")
      end

    end

    cypher = 'Lbh unpxrq n irel frperg zrffntr!'
    cypher.rot13 # => "You hacked a very secret message!"